[www]
; The pool name. This is used to identify the pool in logs and status outputs.
; Reason: Identifies this worker pool for monitoring and logging purposes. In production, using a descriptive name like 'www' helps in distinguishing multiple pools if present.
; Value: 'www' - Standard name for the default pool handling web requests.
; Performance: No direct impact; it's organizational.

user = www-data
; The user under which the PHP-FPM processes will run.
; Reason: Enhances security by running processes as a non-root user, preventing privilege escalation in case of vulnerabilities.
; Value: 'www-data' - Common unprivileged user in Debian-based systems (like Ubuntu) for web services; match it to Nginx's user for file permission consistency.
; Performance: Minimal impact; ensures smooth file access without chown issues.

group = www-data
; The group under which the PHP-FPM processes will run.
; Reason: Similar to user, for security and group-based permissions on files/directories.
; Value: 'www-data' - Matches the user for consistency.
; Performance: No direct impact; aids in secure file handling.

listen = 127.0.0.1:9000
; The address on which to accept FastCGI requests.
; Reason: In the provided default.conf, fastcgi_pass is set to 'php:9000' (which resolves to TCP 9000 in Docker). Using TCP is suitable for production when PHP-FPM and Nginx are in separate containers or hosts for scalability.
; Value: '127.0.0.1:9000' - TCP socket for reliability over Unix sockets in containerized setups; avoids permission issues with Unix sockets across containers.
; Performance: TCP has slight overhead vs. Unix sockets but is negligible; allows easier monitoring and load balancing.

listen.backlog = 511
; The backlog of pending connections.
; Reason: Prevents connection refusals under high load by queuing incoming requests.
; Value: 511 - A safe default; higher than system default (128) but not unlimited (-1) to avoid resource exhaustion.
; Performance: Improves handling of burst traffic; too high can lead to memory issues if queues build up.

listen.allowed_clients = 127.0.0.1
; Restrict which clients can connect to this socket.
; Reason: Security measure to only allow local Nginx to connect, preventing external access.
; Value: '127.0.0.1' - Limits to localhost, matching the Nginx setup where it's proxying locally or via Docker network.
; Performance: No impact; purely security.

listen.owner = www-data
; Owner of the Unix socket (if using Unix socket; ignored for TCP).
; Reason: Ensures the socket file permissions allow Nginx to connect without issues.
; Value: 'www-data' - Matches Nginx user for seamless access (though for TCP, this is optional).
; Performance: N/A for TCP; for Unix, prevents permission denied errors.

listen.group = www-data
; Group of the Unix socket.
; Reason: Similar to listen.owner, for permission control.
; Value: 'www-data' - Consistency with owner.
; Performance: N/A for TCP.

listen.mode = 0660
; Permissions mode for the Unix socket.
; Reason: Secures the socket file against unauthorized access.
; Value: '0660' - Read/write for owner and group only.
; Performance: N/A for TCP.

pm = dynamic
; Process manager control method (static, dynamic, ondemand).
; Reason: In production, dynamic is recommended for balancing resource usage; it starts with fewer processes and scales up based on demand, unlike static (fixed number) which wastes idle resources or ondemand (starts on request, higher latency).
; Value: 'dynamic' - Adapts to traffic patterns in the MVC framework setup.
; Performance: Optimizes memory/CPU; spares idle servers for low traffic, scales for peaks.

pm.max_children = 50
; Maximum number of child processes.
; Reason: Limits total PHP processes to prevent overwhelming the server. Coordinated with Nginx's worker_processes (auto, assuming 4 on a typical server) and worker_connections (1024 from nginx.conf), where max connections ~4096. Set to handle ~50 concurrent PHP requests without overload, assuming each process handles one request and system has sufficient RAM (e.g., 4-8GB, with ~100MB per process).
; Value: 50 - Conservative for production; calculate as (total RAM - OS/Nginx overhead) / avg process RAM. Adjust based on monitoring.
; Performance: Prevents OOM kills; too low causes queuing, too high exhausts resources.

pm.start_servers = 5
; Number of child processes created on startup.
; Reason: Ensures immediate availability for initial requests without spawn delay.
; Value: 5 - Based on min_spare_servers + (max_spare_servers - min_spare_servers)/2; suitable for moderate traffic start.
; Performance: Reduces initial request latency; balances boot time.

pm.min_spare_servers = 5
; Minimum number of idle child processes.
; Reason: Keeps a pool of ready processes for quick response to new requests.
; Value: 5 - Matches low-traffic needs; prevents constant spawning/killing.
; Performance: Improves response time under variable load.

pm.max_spare_servers = 35
; Maximum number of idle child processes.
; Reason: Caps idle processes to free resources during low traffic.
; Value: 35 - Allows scaling up to ~70% of max_children without over-idling.
; Performance: Saves memory/CPU when idle; dynamic PM kills excess above this.

pm.process_idle_timeout = 10s
; Time an idle process lives before being killed (ondemand/dynamic only).
; Reason: Frees resources from long-idle processes in production.
; Value: '10s' - Short enough to save resources, long enough to handle short lulls.
; Performance: Optimizes resource usage without frequent respawns.

pm.max_requests = 500
; Max requests per child before respawn.
; Reason: Prevents memory leaks in long-running PHP scripts by recycling processes.
; Value: 500 - Standard for production; higher if no leaks, lower if issues observed.
; Performance: Maintains stability; respawn overhead is minimal.

pm.status_path = /status
; The URI to view the FPM status page.
; Reason: Enables monitoring via Nginx proxy (add location in default.conf if needed).
; Value: '/status' - Standard path for tools like Prometheus.
; Performance: No impact; useful for ops.

ping.path = /ping
; The ping URI to call the monitoring ping (returns 'pong').
; Reason: For health checks in load balancers or containers.
; Value: '/ping' - Simple endpoint.
; Performance: Negligible.

ping.response = pong
; Response for ping.
; Reason: Customizable for verification.
; Value: 'pong' - Default.
; Performance: N/A.

request_terminate_timeout = 0
; Max time for a script to run before termination (0 disables).
; Reason: Prevents hung scripts; in production, set per-script with ini if needed.
; Value: 0 - Relies on PHP's max_execution_time instead.
; Performance: Avoids unnecessary kills.

request_slowlog_timeout = 0
; Time after which to log slow requests (0 disables).
; Reason: Debugging slow scripts.
; Value: 0 - Disable if not needed; enable with value like 5s for logging.
; Performance: Logging overhead if enabled.

slowlog = /var/log/php-fpm/www-slow.log
; Log file for slow requests.
; Reason: Tracks performance bottlenecks.
; Value: '/var/log/php-fpm/www-slow.log' - Dedicated log.
; Performance: Minimal if timeout is set.

catch_workers_output = yes
; Redirect worker stdout/stderr to main error log.
; Reason: Captures PHP errors in FPM logs for debugging.
; Value: 'yes' - Essential in production to log unhandled outputs.
; Performance: Slight overhead; aids troubleshooting.

env[HOSTNAME] = $HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = /tmp
env[TMPDIR] = /tmp
env[TEMP] = /tmp
; Environment variables passed to PHP.
; Reason: Makes system vars available in PHP.
; Value: Standard paths - For scripts relying on env.
; Performance: No impact.

; Additional production tweaks
access.log = /var/log/php-fpm/www-access.log
; Access log for requests.
; Reason: Monitoring request patterns.
; Value: Dedicated file.
; Performance: Logging overhead; rotate regularly.

clear_env = no
; Clear environment before passing to PHP.
; Reason: Retains Docker/system envs if needed.
; Value: 'no' - Useful in containers.
; Performance: N/A.

; End of configuration. In production, monitor with pm.status_path and adjust pm.* values based on actual load/RAM usage from Nginx's ~1024 connections per worker. Restart PHP-FPM after changes.